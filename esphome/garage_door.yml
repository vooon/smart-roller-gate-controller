---
#<<: !include secrets.yaml

esphome:
  name: garage_door_1
  platform: ESP32
  board: esp-wrover-kit

  on_boot:
    then:
      - switch.turn_on: cc_reset
      - delay: 10ms
      - switch.turn_off: cc_reset

wifi:
  networks: !secret wifi_networks

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Garage Door Fallback Hotspot"
    password: !secret wifi_ap_passwd

captive_portal:

# Enable logging
logger:

debug:

# Enable Home Assistant API
api:
  services:
    - service: open_close_stop_button
      then:
        - script.execute: open_close_stop_button_scr
    - service: open_stop_button
      then:
        - script.execute: open_stop_button_scr
    - service: close_stop_button
      then:
        - script.execute: close_stop_button_scr

web_server:

ota:

time:
  - platform: homeassistant
    id: esp_time
  - platform: sntp
    id: ntp_time
    timezone: Europe/Moscow

#esp32_ble_tracker:

uart:
  #- id: uart
  #  tx_pin: 1
  #  rx_pin: 3
  #  baud_rate: 115200
  #  stop_bits: 1
  - id: uart_cc
    tx_pin: 17
    rx_pin: 16
    baud_rate: 115200
    stop_bits: 1

spi:
  clk_pin: 14
  mosi_pin: 13
  miso_pin: 12

globals:
  - id: gv_prev_door_operation
    type: CoverOperation
    restore_value: no
    initial_value: COVER_OPERATION_IDLE

  - id: gv_door_open_cnt
    type: uint32_t
    restore_value: yes
    initial_value: '0'

  - id: gv_door_close_cnt
    type: uint32_t
    restore_value: yes
    initial_value: '0'

  - id: gv_door_blocked1_cnt
    type: uint32_t
    restore_value: yes
    initial_value: '0'

  - id: gv_ext_remote_enabled
    type: bool
    restore_value: yes
    initial_value: 'true'

  - id: gv_blk_override
    type: bool
    restore_value: yes
    initial_value: 'false'

  - id: gv_blk2_enabled
    type: bool
    restore_value: yes
    initial_value: "true"

binary_sensor:
  - platform: status
    name: Garage Door 1 Status

  #- platform: gpio
  #  pin: 27
  #  id: s2_isr

  - platform: gpio
    id: ext_open
    name: Garage Door 1 Ext remote Open
    pin:
      number: 21
      mode: INPUT_PULLDOWN
      inverted: false
    filters:
      - delayed_on: 10ms
    on_press:
      then:
        - if:
            condition:
              - switch.is_on: ext_remote_enabled
            then:
              - logger.log:
                  format: "ext_open: activated: opening cover"
                  level: INFO
              - cover.open: door_cover
            else:
              - logger.log:
                  format: "ext_open: activated but feature disabled"
                  level: WARN
    on_release: &ext_on_release
      then:
        - if:
            condition:
              - switch.is_on: ext_remote_enabled
            then:
              - logger.log:
                  format: "ext: deactivated: stopping cover"
                  level: INFO
              - cover.stop: door_cover
            else:
              - logger.log:
                  format: "ext: deactivated but feature disabled"
                  level: WARN

  - platform: gpio
    id: ext_close
    name: Garage Door 1 Ext remote Close
    pin:
      number: 22
      mode: INPUT_PULLDOWN
      inverted: false
    filters:
      - delayed_on: 10ms
    on_press:
      then:
        - if:
            condition:
              - switch.is_on: ext_remote_enabled
            then:
              - logger.log:
                  format: "ext_close: activated: closing cover"
                  level: INFO
              - cover.close: door_cover
            else:
              - logger.log:
                  format: "ext_close: activated but feature disabled"
                  level: WARN
    on_release: *ext_on_release

  - platform: gpio
    device_class: safety
    id: blk1
    name: "Garage Door 1 Safety block 1"
    pin:
      number: 33
      inverted: false  # open circuit => block
    filters:
      - delayed_on: 10ms

  - platform: gpio
    id: blk2
    name: "Garafe Door 1 Safety block 2 / Open/Close"
    pin:
      number: 34
      inverted: true  # use as Open/Close button
    filters:
      - delayed_on: 10ms
    on_press:
      then:
        - logger.log:
            format: "blk2: activated"
            level: INFO
        - if:
            condition:
              - switch.is_on: blk2_enabled
            then:
              - script.execute: open_close_stop_button_scr
            else:
              - logger.log:
                  format: "blk2: disabled"
                  level: WARN

  - platform: gpio
    id: rsns
    name: "Garage Door 1 closed end stop"
    pin:
      number: 35
      inverted: true
    filters:
      - delayed_on: 10ms
    on_press:
      then:
        - logger.log:
            format: "rsns: activated. wait 10s to give a time to fully unroll the door."
            level: INFO
        - delay: 10s
        - logger.log:
            format: "rsns: setting door state as closed."
            level: INFO
        - lambda: !lambda |
            if (id(door_cover).current_operation != COVER_OPERATION_OPENING) {
              id(door_cover).position = COVER_CLOSED;
              id(door_cover).publish_state(true);
            }
        - logger.log:
            format: "rsns: done"
            level: INFO

  - platform: template
    name: Garage Door 1 Closed
    device_class: garage_door
    lambda: |-
      // NOTE: Home Assistant have inverted meaning of sensor: ON: open, OFF: closed
      return !id(rsns).state;

  - platform: template
    id: blk_any
    name: Garage Door 1 Safety Block (any)
    device_class: safety
    lambda: |-
      if (id(blk_override).state) {
        return false;
      } else {
        return id(blk1).state;
      }
    on_press:
      then:
        - lambda: !lambda |
            id(gv_prev_door_operation) = id(door_cover).current_operation;
            id(gv_door_blocked1_cnt) += 1;
        - logger.log:
            format: "blk: activated: stopping cover"
            level: INFO
        - cover.stop: door_cover
        - logger.log:
            format: "blk: cover stopped"
            level: INFO
    on_release:
      then:
        - logger.log:
            format: "blk: deactivated: continue cover operation: %s"
            level: INFO
            args:
              - &prev_state_str "cover_operation_to_str(id(gv_prev_door_operation))"
        - lambda: !lambda |
            auto call = id(door_cover).make_call();
            if (id(gv_prev_door_operation) == COVER_OPERATION_OPENING) {
              call.set_command_open();
              call.perform();
            } else if (id(gv_prev_door_operation) == COVER_OPERATION_CLOSING) {
              call.set_command_close();
              call.perform();
            }
        - logger.log:
            format: "blk: operation restored"
            level: INFO

text_sensor:
  - platform: wifi_info
    ssid:
      name: Garage Door 1 SSID
    bssid:
      name: Garage Door 1 BSSID

  - platform: version
    name: "ESPHome version"

sensor:
  - platform: wifi_signal
    name: "Garage Door 1 WiFi Signal"
    update_interval: 10s

  - platform: esp32_hall
    name: "ESP32 Hall Sensor"
    update_interval: 10s

  - platform: uptime
    name: "Garage Door 1 Uptime"

  - platform: template
    name: "Garage Door 1 Open Count"
    icon: mdi:counter
    lambda: !lambda |
      return float(id(gv_door_open_cnt));
    update_interval: 10s

  - platform: template
    name: "Garage Door 1 Close Count"
    icon: mdi:counter
    lambda: !lambda |
      return float(id(gv_door_close_cnt));
    update_interval: 10s

  - platform: template
    name: "Garage Door 1 Blocked Count"
    icon: mdi:counter
    lambda: !lambda |
      return float(id(gv_door_blocked1_cnt));
    update_interval: 10s

switch:
  - platform: restart
    name: Garage Door 1 reboot

  - platform: gpio
    name: Door Motor Up
    internal: true
    id: k1_up
    pin: 2
    # NOTE: hardware has lock from that,
    #       K1 NC powers K2, so we always may open the door.
    interlock: &relay_lock
      - k1_up
      - k2_down
    interlock_wait_time: &relay_lock_time 100ms
    restore_mode: always off

  - platform: gpio
    name: Door Motor Down
    internal: true
    id: k2_down
    pin: 4
    interlock: *relay_lock
    interlock_wait_time: *relay_lock_time
    restore_mode: always off

  - platform: gpio
    name: CC Reset
    id: cc_reset
    internal: true
    pin:
      number: 5
      inverted: true
    restore_mode: always off

  - platform: template
    name: Garage Door 1 External Remote Enabled
    id: ext_remote_enabled
    icon: mdi:remote
    lambda: |-
      return id(gv_ext_remote_enabled);
    turn_on_action:
      - globals.set:
          id: gv_ext_remote_enabled
          value: 'true'
    turn_off_action:
      - globals.set:
          id: gv_ext_remote_enabled
          value: 'false'

  - platform: template
    name: Garage Door 1 Safety block override
    id: blk_override
    icon: mdi:debug-step-over
    lambda: |-
      return id(gv_blk_override);
    turn_on_action:
      - globals.set:
          id: gv_blk_override
          value: 'true'
      - script.execute: deactivate_blk_override_scr
    turn_off_action:
      - globals.set:
          id: gv_blk_override
          value: 'false'
      - script.stop: deactivate_blk_override_scr

  - platform: template
    name: Garage Door 1 Internal Open/Close/Stop button Enabled
    id: blk2_enabled
    icon: mdi:lock-open
    lambda: |-
      return id(gv_blk2_enabled);
    turn_on_action:
      - globals.set:
          id: gv_blk2_enabled
          value: 'true'
    turn_off_action:
      - globals.set:
          id: gv_blk2_enabled
          value: 'false'

cover:
  # NOTE: my roller have built-in endstops,
  #       so it's possible to detect that operation is done
  #       by checking that PZEM Current < 0.1 A
  #
  #       blk1 used to STOP motion
  #       because something blocks gate, e.g. a car.
  #       if problem resolves - continue operation.
  #
  #       blk2 used as Open/Close/Stop button.
  #
  #       rsns inductive endstop detects when door is closed.
  - platform: time_based
    id: door_cover
    name: Garage Door 1
    device_class: garage

    open_duration: 2min
    open_action:
      - if: &blk_if
          condition:
            binary_sensor.is_on: blk_any
          then:
            - logger.log:
                format: "door_cover: blk activated, operations blocked."
                level: WARN
            - cover.stop: door_cover
          else:
            - switch.turn_on: k1_up
      - lambda: !lambda |
          id(gv_door_open_cnt) += 1;

    close_duration: 2min
    close_action:
      - if:
          <<: *blk_if
          else:
            - switch.turn_on: k2_down
      - lambda: !lambda |
          id(gv_door_close_cnt) += 1;

    stop_action:
      - switch.turn_off: k1_up
      - switch.turn_off: k2_down

    # NOTE: my roller have it, but i do not want to leave
    #       motor energized.
    has_built_in_endstop: false

script:
  - id: open_close_stop_button_scr
    #name: "Open/Close/Stop Door"
    then:
      - logger.log:
          format: "open/close/stop activated: prev state: %s"
          level: INFO
          args: [*prev_state_str]
      - lambda: !lambda |
          const auto op = id(door_cover).current_operation;
          auto call = id(door_cover).make_call();
          if (op != COVER_OPERATION_IDLE) {
            id(gv_prev_door_operation) = op;
            call.set_command_stop();
          } else {
            if (id(gv_prev_door_operation) == COVER_OPERATION_CLOSING ||
                id(door_cover).is_fully_closed()) {
              call.set_command_open();
            } else {
              call.set_command_close();
            }
          }
          call.perform();
      - logger.log:
          format: "open/close/stop: operation performed"
          level: INFO

  - id: open_stop_button_scr
    #name: "Open/Stop Door"
    then:
      - logger.log:
          format: "open/stop: activated"
          level: INFO
      - if: &scr_if
          condition:
            lambda: !lambda |
              const auto op = id(door_cover).current_operation;
              return op != COVER_OPERATION_IDLE || op != COVER_OPERATION_OPENING;
          then:
            - cover.stop: door_cover
          else:
            - cover.open: door_cover
      - logger.log:
          format: "open/stop: operation performed"
          level: INFO

  - id: close_stop_button_scr
    #name: "Close/Stop Door"
    then:
      - logger.log:
          format: "close/stop: activated"
          level: INFO
      - if:
          <<: *scr_if
          condition:
            lambda: !lambda |
              const auto op = id(door_cover).current_operation;
              return op != COVER_OPERATION_IDLE || op != COVER_OPERATION_CLOSING;
          else:
            - cover.close: door_cover
      - logger.log:
          format: "close/stop: operation performed"
          level: INFO

  - id: deactivate_blk_override_scr
    then:
      - logger.log:
          format: "safety block override will be disabled after 5min"
          level: WARN
      - delay: 5min
      - logger.log:
          format: "safety block override disabled"
          level: INFO
      - switch.turn_off: blk_override
