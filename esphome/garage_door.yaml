---
#<<: !include secrets.yaml

substitutions:
  uname: Garage Door 1
  device_name: garage_door_1
  friendly_name: $uname
  device_description: "Garage Door 1"

esphome:
  name: '${device_name}'
  comment: '${device_description}'
  project:
    name: "vooon.roller_gate"
    version: "1.0.0"

  on_boot:
    then:
      - switch.turn_on: cc_reset
      - delay: 10ms
      - switch.turn_off: cc_reset

esp32:
  board: esp-wrover-kit
  variant: esp32
  framework:
    type: esp-idf
    version: recommended
    sdkconfig_options:
      # CONFIG_ESPTOOLPY_FLASHSIZE: '4MB'
      # CONFIG_ETH_ENABLED: 'n'
      # CONFIG_ESPTOOLPY_AFTER_NORESET: 'y'

wifi:
  networks: !secret wifi_networks

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${uname} Fallback Hotspot"
    password: !secret wifi_ap_passwd

# captive_portal:

# Enable logging
logger:

# debug:

# Enable Home Assistant API
api:
  id: api_apiserver
  password: !secret api_password
  reboot_timeout: 5min
  services:
    - service: open_close_stop_button
      then:
        - script.execute: open_close_stop_button_scr
    - service: open_stop_button
      then:
        - script.execute: open_stop_button_scr
    - service: close_stop_button
      then:
        - script.execute: close_stop_button_scr
    - service: reset_counters
      then:
        - globals.set:
            id: gv_door_open_cnt
            value: '0'
        - globals.set:
            id: gv_door_close_cnt
            value: '0'
        - globals.set:
            id: gv_door_blocked_cnt
            value: '0'

ota:
  password: !secret ota_password

# web_server:
#   auth:
#     username: admin
#     password: !secret web_password

# prometheus:

time:
  - platform: homeassistant
    id: esp_time
  - platform: sntp
    id: ntp_time
    timezone: Europe/Moscow

#esp32_ble_tracker:

uart:
  #- id: uart
  #  tx_pin: 1
  #  rx_pin: 3
  #  baud_rate: 115200
  #  stop_bits: 1
  - id: uart_cc
    tx_pin: 17
    rx_pin: 16
    baud_rate: 115200
    stop_bits: 1

spi:
  clk_pin: 14
  mosi_pin: 13
  miso_pin: 12

globals:
  - id: gv_prev_door_operation
    type: CoverOperation
    restore_value: no
    initial_value: COVER_OPERATION_IDLE

  - id: gv_door_open_cnt
    type: uint32_t
    restore_value: yes
    initial_value: '0'

  - id: gv_door_close_cnt
    type: uint32_t
    restore_value: yes
    initial_value: '0'

  - id: gv_door_blocked_cnt
    type: uint32_t
    restore_value: yes
    initial_value: '0'

  - id: gv_ext_remote_enabled
    type: bool
    restore_value: yes
    initial_value: 'true'

  - id: gv_blk2_enabled
    type: bool
    restore_value: yes
    initial_value: "true"

  - id: gv_blk_override
    type: bool
    restore_value: no
    initial_value: 'false'

binary_sensor:
  - platform: status
    name: "$uname - Connected"

  #- platform: gpio
  #  pin: 27
  #  id: s2_isr

  - platform: gpio
    id: ext_open
    name: "$uname - Ext remote Open"
    pin:
      number: 21
      mode: INPUT_PULLDOWN
      inverted: false
    filters:
      - delayed_on_off: 10ms
    on_press:
      then:
        - if:
            condition:
              - switch.is_on: ext_remote_enabled
            then:
              - logger.log:
                  format: "ext_open: activated: opening cover"
                  level: INFO
              - cover.open: door_cover
            else:
              - logger.log:
                  format: "ext_open: activated but feature disabled"
                  level: WARN
    on_release: &ext_on_release
      then:
        - if:
            condition:
              - switch.is_on: ext_remote_enabled
            then:
              - logger.log:
                  format: "ext: deactivated: stopping cover"
                  level: INFO
              - cover.stop: door_cover
            else:
              - logger.log:
                  format: "ext: deactivated but feature disabled"
                  level: WARN

  - platform: gpio
    id: ext_close
    name: "$uname - Ext remote Close"
    pin:
      number: 22
      mode: INPUT_PULLDOWN
      inverted: false
    filters:
      - delayed_on_off: 10ms
    on_press:
      then:
        - if:
            condition:
              - switch.is_on: ext_remote_enabled
            then:
              - logger.log:
                  format: "ext_close: activated: closing cover"
                  level: INFO
              - cover.close: door_cover
            else:
              - logger.log:
                  format: "ext_close: activated but feature disabled"
                  level: WARN
    on_release: *ext_on_release

  - platform: gpio
    device_class: safety
    id: blk1
    name: "${uname} - Safety block 1"
    pin:
      number: 33
      inverted: false  # open circuit => block
    filters:
      - delayed_on: 10ms
      - delayed_off: 1s

  - platform: gpio
    id: blk2
    name: "${uname} - Safety block 2 / Open/Close"
    pin:
      number: 34
      inverted: true  # use as Open/Close button
    filters:
      - delayed_on_off: 10ms
    on_press:
      then:
        - logger.log:
            format: "blk2: activated"
            level: INFO
        - if:
            condition:
              - switch.is_on: blk2_enabled
            then:
              - script.execute: open_close_stop_button_scr
            else:
              - logger.log:
                  format: "blk2: disabled"
                  level: WARN

  - platform: gpio
    id: rsns
    name: "${uname} - closed end stop"
    pin:
      number: 35
      inverted: true
    filters:
      - delayed_on_off: 10ms
    on_press:
      then:
        - logger.log:
            format: "rsns: activated. wait 10s to give a time to fully unroll the door."
            level: INFO
        - lambda: !lambda |
            // A hack to give more time for close operation.
            // Door may remain not fully closed if it's not fully opened before
            // because cover controller thinks that position is 0.0 at the point when RSNS is activated.
            if (id(door_cover).current_operation == COVER_OPERATION_CLOSING) {
              id(door_cover).position = 0.05f;
            }
        - delay: 20s
        - logger.log:
            format: "rsns: setting door state as closed."
            level: INFO
        - lambda: !lambda |
            if (id(door_cover).current_operation != COVER_OPERATION_OPENING) {
              id(door_cover).position = COVER_CLOSED;
              id(door_cover).publish_state(true);
            }
        - logger.log:
            format: "rsns: done"
            level: INFO
    on_release:
      then:
        - logger.log:
            format: "rsns: disactivated."
            level: INFO
        - lambda: !lambda |
            // A hack to give more time for close operation.
            // Door may remain not fully closed if it's not fully opened before
            // because cover controller thinks that position is 0.0 at the point when RSNS is activated.
            if (id(door_cover).current_operation == COVER_OPERATION_OPENING && id(door_cover).position < 0.05f) {
              id(door_cover).position = 0.05f;
            }

  - platform: template
    name: "$uname - Closed"
    device_class: garage_door
    lambda: |-
      // NOTE: Home Assistant have inverted meaning of sensor: ON: open, OFF: closed
      return !id(rsns).state;

  - platform: template
    id: blk_any
    name: "$uname - Safety Block (any)"
    device_class: safety
    lambda: |-
      if (id(blk_override).state) {
        return false;
      } else {
        return id(blk1).state;
      }
    on_press:
      then:
        - lambda: !lambda |
            id(gv_prev_door_operation) = id(door_cover).current_operation;
            id(gv_door_blocked_cnt) += 1;
        - logger.log:
            format: "blk: activated: stopping cover"
            level: INFO
        - cover.stop: door_cover
        - logger.log:
            format: "blk: cover stopped"
            level: INFO
        - script.execute: update_counters_scr
    on_release:
      then:
        - logger.log:
            format: "blk: deactivated: continue cover operation: %s"
            level: INFO
            args:
              - &prev_state_str "cover_operation_to_str(id(gv_prev_door_operation))"
        - lambda: !lambda |
            auto call = id(door_cover).make_call();
            if (id(gv_prev_door_operation) == COVER_OPERATION_OPENING) {
              call.set_command_open();
              call.perform();
            } else if (id(gv_prev_door_operation) == COVER_OPERATION_CLOSING) {
              call.set_command_close();
              call.perform();
            }
        - logger.log:
            format: "blk: operation restored"
            level: INFO

text_sensor:
  - platform: wifi_info
    ip_address:
      name: "${friendly_name} - IP Address"
      icon: mdi:wifi
    ssid:
      name: "${friendly_name} - Connected SSID"
      icon: mdi:wifi-strength-2
    bssid:
      name: "${friendly_name} - BSSID"

  - platform: version
    hide_timestamp: true
    name: "${friendly_name} - ESPHome Version"

sensor:
  - platform: wifi_signal
    name: "$uname - WiFi Signal"
    update_interval: 10s

  - platform: uptime
    name: "$uname - Uptime"

  - platform: template
    name: "${uname} - Open Count"
    id: sns_open_cnt
    icon: mdi:counter
    accuracy_decimals: 0
    unit_of_measurement: count
    lambda: !lambda |
      return float(id(gv_door_open_cnt));

  - platform: template
    name: "${uname} - Close Count"
    id: sns_close_cnt
    icon: mdi:counter
    accuracy_decimals: 0
    unit_of_measurement: count
    lambda: !lambda |
      return float(id(gv_door_close_cnt));

  - platform: template
    name: "${uname} - Blocked Count"
    id: sns_blocked_cnt
    icon: mdi:counter
    accuracy_decimals: 0
    unit_of_measurement: count
    lambda: !lambda |
      return float(id(gv_door_blocked_cnt));

switch:
  - platform: restart
    name: "$uname - Reboot"

  - platform: gpio
    name: "$uname - Motor Up"
    internal: true
    id: k1_up
    pin: 2
    # NOTE: hardware has lock from that,
    #       K1 NC powers K2, so we always may open the door.
    interlock: &relay_lock
      - k1_up
      - k2_down
    interlock_wait_time: &relay_lock_time 100ms
    restore_mode: always off

  - platform: gpio
    name: "$uname - Motor Down"
    internal: true
    id: k2_down
    pin: 4
    interlock: *relay_lock
    interlock_wait_time: *relay_lock_time
    restore_mode: always off

  - platform: gpio
    name: "$uname - CC Reset"
    id: cc_reset
    internal: true
    pin:
      number: 5
      inverted: true
    restore_mode: always off

  - platform: template
    name: "$uname - External Remote Enabled"
    id: ext_remote_enabled
    icon: mdi:remote
    lambda: |-
      return id(gv_ext_remote_enabled);
    turn_on_action:
      - globals.set:
          id: gv_ext_remote_enabled
          value: 'true'
    turn_off_action:
      - globals.set:
          id: gv_ext_remote_enabled
          value: 'false'

  - platform: template
    name: "$uname - Safety block override"
    id: blk_override
    icon: mdi:debug-step-over
    lambda: |-
      return id(gv_blk_override);
    turn_on_action:
      - globals.set:
          id: gv_blk_override
          value: 'true'
      - script.execute: deactivate_blk_override_scr
    turn_off_action:
      - globals.set:
          id: gv_blk_override
          value: 'false'
      - script.stop: deactivate_blk_override_scr

  - platform: template
    name: "$uname - Internal Open/Close/Stop button Enabled"
    id: blk2_enabled
    icon: mdi:lock-open
    lambda: |-
      return id(gv_blk2_enabled);
    turn_on_action:
      - globals.set:
          id: gv_blk2_enabled
          value: 'true'
    turn_off_action:
      - globals.set:
          id: gv_blk2_enabled
          value: 'false'

cover:
  # NOTE: my roller have built-in endstops,
  #       so it's possible to detect that operation is done
  #       by checking that PZEM Current < 0.1 A
  #
  #       blk1 used to STOP motion
  #       because something blocks gate, e.g. a car.
  #       if problem resolves - continue operation.
  #
  #       blk2 used as Open/Close/Stop button.
  #
  #       rsns inductive endstop detects when door is closed.
  - platform: time_based
    id: door_cover
    name: "$uname"
    device_class: garage

    open_duration: 30s  # at summer it's about 20s, at winter - more
    open_action:
      - if: &blk_if
          condition:
            binary_sensor.is_on: blk_any
          then:
            - logger.log:
                format: "door_cover: blk activated, operations blocked."
                level: WARN
            - cover.stop: door_cover
          else:
            - switch.turn_on: k1_up
      - lambda: !lambda |
          id(gv_door_open_cnt) += 1;
      - script.execute: update_counters_scr

    close_duration: 30s  # at summer it's the same 20s, at winter it's faster
    close_action:
      - if:
          <<: *blk_if
          else:
            - switch.turn_on: k2_down
      - lambda: !lambda |
          id(gv_door_close_cnt) += 1;
      - script.execute: update_counters_scr

    stop_action:
      - switch.turn_off: k1_up
      - switch.turn_off: k2_down
      - script.execute: update_counters_scr

    # NOTE: my roller have it, but i do not want to leave
    #       motor energized.
    has_built_in_endstop: false

script:
  - id: update_counters_scr
    then:
      - component.update: sns_open_cnt
      - component.update: sns_close_cnt
      - component.update: sns_blocked_cnt

  - id: open_close_stop_button_scr
    #name: "Open/Close/Stop Door"
    then:
      - logger.log:
          format: "open/close/stop activated: prev state: %s"
          level: INFO
          args: [*prev_state_str]
      - lambda: !lambda |
          const auto op = id(door_cover).current_operation;
          auto call = id(door_cover).make_call();
          if (op != COVER_OPERATION_IDLE) {
            id(gv_prev_door_operation) = op;
            call.set_command_stop();
          } else {
            if (id(gv_prev_door_operation) == COVER_OPERATION_CLOSING ||
                id(door_cover).is_fully_closed()) {
              call.set_command_open();
            } else {
              call.set_command_close();
            }
          }
          call.perform();
      - logger.log:
          format: "open/close/stop: operation performed"
          level: INFO

  - id: open_stop_button_scr
    #name: "Open/Stop Door"
    then:
      - logger.log:
          format: "open/stop: activated"
          level: INFO
      - if: &scr_if
          condition:
            lambda: !lambda |
              const auto op = id(door_cover).current_operation;
              return op != COVER_OPERATION_IDLE || op != COVER_OPERATION_OPENING;
          then:
            - cover.stop: door_cover
          else:
            - cover.open: door_cover
      - logger.log:
          format: "open/stop: operation performed"
          level: INFO

  - id: close_stop_button_scr
    #name: "Close/Stop Door"
    then:
      - logger.log:
          format: "close/stop: activated"
          level: INFO
      - if:
          <<: *scr_if
          condition:
            lambda: !lambda |
              const auto op = id(door_cover).current_operation;
              return op != COVER_OPERATION_IDLE || op != COVER_OPERATION_CLOSING;
          else:
            - cover.close: door_cover
      - logger.log:
          format: "close/stop: operation performed"
          level: INFO

  - id: deactivate_blk_override_scr
    then:
      - logger.log:
          format: "safety block override will be disabled after 5min"
          level: WARN
      - delay: 5min
      - logger.log:
          format: "safety block override disabled"
          level: INFO
      - switch.turn_off: blk_override
